/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package seguridad;

import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Ruben
 */
public class Administracion extends javax.swing.JFrame {
    public  Connection conBase;
    public  Conexion cx;
    public Statement stmt = null;
    public DefaultTableModel modelo= new DefaultTableModel();
    public DefaultTableModel modelo2= new DefaultTableModel();
    public DefaultTableModel modelo3= new DefaultTableModel();
    public DefaultTableModel modelo4= new DefaultTableModel();
    public DefaultTableModel modelo5= new DefaultTableModel();
    public DefaultTableModel modelo6= new DefaultTableModel();
    public int codUser=0;
    public int codRol=0;
    public int codFun=0;
    public int codNewRol=0;
    public int codNewFun=0;
    public String descRol="";
    public String descFun="";
    public int codRolSelec=0;
    public int codFunSelec=0;
    public String userAct="";
    public String nomAct="";
    public String passAct="";
    public Boolean nuevo=false;
    public Boolean nuevoRol=false;
    public Boolean nuevoFun=false;
    public int newUser=0;
    public String userNew="";
    public String nomNew="";
    public String passNew="";
    public String claveAnterior="";
    public Boolean userGuardado=false;
    public Boolean rolGuardado=false;
    public Boolean funGuardado=false;
    public Boolean datosCorrectos=false;
    public Boolean datosCorrectosRol=false;
    public Boolean datosCorrectosFun=false;
    public String selecBox;
    public String selecBoxFun;
    public String claveEncriptada;
    public String claveDecodificada;
    public MD5 encry;
    /**
     * Creates new form Administracion
     */
    public Administracion() {
        initComponents();
       
        this.setTitle("UTPL - Sección Administración");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setVisible(false);
        this.setResizable(false);
        modelo.addColumn("Id");
        modelo.addColumn("Nombre y Apellido");
        modelo.addColumn("Usuario");
        modelo.addColumn("Contraseña");
        modelo2.addColumn("Id");
        modelo2.addColumn("Descripcion");
        modelo3.addColumn("Id");
        modelo3.addColumn("Funcion");
        modelo4.addColumn("Id");
        modelo4.addColumn("Descripcion");
        modelo5.addColumn("Id");
        modelo5.addColumn("Descripcion");
        modelo6.addColumn("Id");
        modelo6.addColumn("Descripcion");
        txtCod.setEnabled(false);
        txt_F_cod.setEnabled(false);
        cx=new Conexion();
        conBase = cx.Conexion();
        encry=new MD5();
         if (conBase!=null){
            System.out.println("Contectado desde Administracion Login");
         }
         llenarDatosUsuario();
         llenarDatosRoles();
         llenarDatosFunciones();
         cargarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        PanelPrincipal = new javax.swing.JPanel();
        Pestanas = new javax.swing.JTabbedPane();
        PanelUser = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usuariosTable = new javax.swing.JTable();
        buscarBtnUser = new javax.swing.JButton();
        buscarTxtUser = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        rolesTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtnombre = new javax.swing.JTextField();
        txtuser = new javax.swing.JTextField();
        txtpass = new javax.swing.JTextField();
        eliminarRolBtnUser = new javax.swing.JButton();
        cbxroles = new javax.swing.JComboBox<>();
        agregarRolBtnUser = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        funcionesTable = new javax.swing.JTable();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        PaneRoles = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbRol = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbFun = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtCod = new javax.swing.JTextField();
        txtDes = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        btn_Nuevo_Rol = new javax.swing.JButton();
        btn_Guardar_Rol = new javax.swing.JButton();
        btn_Eliminar_Rol = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        cbx_Fun = new javax.swing.JComboBox<>();
        btn_Agregar_Rol = new javax.swing.JButton();
        btn_Eli_Fun = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tb_F_Fun = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        btn_F_nuevo = new javax.swing.JButton();
        btn_F_guardar = new javax.swing.JButton();
        btn_F_Eliminar = new javax.swing.JButton();
        txt_F_cod = new javax.swing.JTextField();
        txt_F_des = new javax.swing.JTextField();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Pestanas.setBackground(new java.awt.Color(255, 255, 255));

        usuariosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID USUARIO", "NOMBRE Y APELLIDO", "USUARIO", "CONTRASEÑA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        usuariosTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usuariosTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(usuariosTable);

        buscarBtnUser.setText("Buscar");
        buscarBtnUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnUserActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre a Buscar:");

        jLabel2.setText("Roles Asignados");

        rolesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID ROL", "DESCRIPCION"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rolesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rolesTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(rolesTable);

        jLabel3.setText("Detalles de  usuario seleccionado:");

        jLabel4.setText("Nombre");

        jLabel5.setText("Usuario");

        jLabel6.setText("Contraseña");

        eliminarRolBtnUser.setText("Eliminar");
        eliminarRolBtnUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarRolBtnUserActionPerformed(evt);
            }
        });

        cbxroles.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        agregarRolBtnUser.setText("Agregar");
        agregarRolBtnUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarRolBtnUserActionPerformed(evt);
            }
        });

        jLabel7.setText("Detalle de funciones:");

        funcionesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "FUNCION"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(funcionesTable);

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jLabel8.setText("Alumno: Ruben Regalado Sangurima");

        javax.swing.GroupLayout PanelUserLayout = new javax.swing.GroupLayout(PanelUser);
        PanelUser.setLayout(PanelUserLayout);
        PanelUserLayout.setHorizontalGroup(
            PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelUserLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(174, 174, 174))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelUserLayout.createSequentialGroup()
                        .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelUserLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buscarTxtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buscarBtnUser, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelUserLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(110, 110, 110))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelUserLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelUserLayout.createSequentialGroup()
                        .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PanelUserLayout.createSequentialGroup()
                                .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelUserLayout.createSequentialGroup()
                                        .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PanelUserLayout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtpass, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PanelUserLayout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(37, 37, 37)
                                        .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtuser)
                                            .addComponent(txtnombre, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)))
                                    .addGroup(PanelUserLayout.createSequentialGroup()
                                        .addGap(62, 62, 62)
                                        .addComponent(jLabel8)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(PanelUserLayout.createSequentialGroup()
                                    .addComponent(agregarRolBtnUser, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(eliminarRolBtnUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(cbxroles, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(21, 21, 21))))
            .addGroup(PanelUserLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        PanelUserLayout.setVerticalGroup(
            PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buscarBtnUser)
                        .addComponent(buscarTxtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PanelUserLayout.createSequentialGroup()
                        .addComponent(cbxroles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(agregarRolBtnUser)
                            .addComponent(eliminarRolBtnUser))
                        .addGap(25, 25, 25)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(PanelUserLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtuser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelUserLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNuevo)
                            .addComponent(btnGuardar)
                            .addComponent(btnEliminar)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Pestanas.addTab("Gestion Usuarios", PanelUser);

        tbRol.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "DESCRIPCION"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbRol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbRolMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tbRol);

        tbFun.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "DESCRIPCION"
            }
        ));
        jScrollPane5.setViewportView(tbFun);

        jLabel9.setText("Listado Roles");

        jLabel10.setText("Listado Funciones Del Rol Seleccionado");

        jLabel11.setText("Codigo");

        jLabel12.setText("Descripcion");

        jLabel13.setText("Detalle de Rol");

        btn_Nuevo_Rol.setText("Nuevo");
        btn_Nuevo_Rol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Nuevo_RolActionPerformed(evt);
            }
        });

        btn_Guardar_Rol.setText("Guardar");
        btn_Guardar_Rol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Guardar_RolActionPerformed(evt);
            }
        });

        btn_Eliminar_Rol.setText("Eliminar");
        btn_Eliminar_Rol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_RolActionPerformed(evt);
            }
        });

        jLabel14.setText("Funciones Disponibles");

        cbx_Fun.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btn_Agregar_Rol.setText("Agregar");
        btn_Agregar_Rol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Agregar_RolActionPerformed(evt);
            }
        });

        btn_Eli_Fun.setText("Eliminar");
        btn_Eli_Fun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eli_FunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PaneRolesLayout = new javax.swing.GroupLayout(PaneRoles);
        PaneRoles.setLayout(PaneRolesLayout);
        PaneRolesLayout.setHorizontalGroup(
            PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PaneRolesLayout.createSequentialGroup()
                .addGroup(PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PaneRolesLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PaneRolesLayout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addGroup(PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(cbx_Fun, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PaneRolesLayout.createSequentialGroup()
                                        .addComponent(btn_Nuevo_Rol)
                                        .addGap(26, 26, 26)
                                        .addComponent(btn_Guardar_Rol)
                                        .addGap(18, 18, 18)
                                        .addComponent(btn_Eliminar_Rol))))
                            .addGroup(PaneRolesLayout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addGroup(PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCod, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14)
                                    .addComponent(txtDes, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13)))
                            .addGroup(PaneRolesLayout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addComponent(btn_Agregar_Rol)
                                .addGap(41, 41, 41)
                                .addComponent(btn_Eli_Fun))))
                    .addGroup(PaneRolesLayout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(jLabel9))
                    .addGroup(PaneRolesLayout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jLabel10)))
                .addGap(207, 207, 207))
        );
        PaneRolesLayout.setVerticalGroup(
            PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PaneRolesLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel9)
                .addGroup(PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PaneRolesLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PaneRolesLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtCod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtDes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Nuevo_Rol)
                            .addComponent(btn_Guardar_Rol)
                            .addComponent(btn_Eliminar_Rol))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PaneRolesLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(cbx_Fun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addGroup(PaneRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Agregar_Rol)
                            .addComponent(btn_Eli_Fun))))
                .addGap(21, 21, 21))
        );

        Pestanas.addTab("Gestion Roles", PaneRoles);

        jLabel15.setText("Listado Funciones");

        tb_F_Fun.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_F_Fun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_F_FunMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tb_F_Fun);

        jLabel16.setText("Detalle de Funciones");

        jLabel17.setText("Codigo");

        jLabel18.setText("Descripcion");

        btn_F_nuevo.setText("Nuevo");
        btn_F_nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_F_nuevoActionPerformed(evt);
            }
        });

        btn_F_guardar.setText("Guardar");
        btn_F_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_F_guardarActionPerformed(evt);
            }
        });

        btn_F_Eliminar.setText("Eliminar");
        btn_F_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_F_EliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addComponent(jLabel16))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel18))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_F_cod)
                                    .addComponent(txt_F_des, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(btn_F_nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(btn_F_guardar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_F_Eliminar))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(jLabel15)))
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(23, 23, 23)
                                .addComponent(jLabel17))
                            .addComponent(txt_F_cod, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(txt_F_des, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_F_nuevo)
                            .addComponent(btn_F_guardar)
                            .addComponent(btn_F_Eliminar))))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        Pestanas.addTab("Gestion Funciones", jPanel1);

        javax.swing.GroupLayout PanelPrincipalLayout = new javax.swing.GroupLayout(PanelPrincipal);
        PanelPrincipal.setLayout(PanelPrincipalLayout);
        PanelPrincipalLayout.setHorizontalGroup(
            PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Pestanas, javax.swing.GroupLayout.PREFERRED_SIZE, 763, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        PanelPrincipalLayout.setVerticalGroup(
            PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPrincipalLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Pestanas, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbRolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbRolMouseClicked
        // TODO add your handling code here:
        if (tbRol.getSelectedRow() != -1) {
            String codigo = (String) modelo4.getValueAt(tbRol.getSelectedRow(), 0);
            codRol = Integer.parseInt(codigo);
            descRol = (String) modelo4.getValueAt(tbRol.getSelectedRow(), 1);
            txtCod.setText(""+codRol);
            txtDes.setText(descRol);
            nuevoRol=false;
            cargarFuncionesFun(""+codRol);
        } else {
            System.out.println("Seleccione un renglon primero");
        }
    }//GEN-LAST:event_tbRolMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog (null, "Confirme si desea eliminar el usuario seleccionado", "UTPL", JOptionPane.YES_NO_OPTION);
        if (result == 0){
            eliminarUser(codUser,"ELIMINAR");
            llenarDatosUsuario();
            System.out.println ("SÍ");
            JOptionPane.showMessageDialog (null, "Usuario eliminado correctamente", "UTPL", JOptionPane.INFORMATION_MESSAGE);
        }else{
            System.out.println ("NO");
            JOptionPane.showMessageDialog (null, "Se cancelo eliminación de usuario", "UTPL", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        validarNuevoUser();
        if(datosCorrectos==true){
            if(nuevo==true){
                int result2 = JOptionPane.showConfirmDialog (null, "Confirme si desea crear nuevo usuario", "UTPL", JOptionPane.YES_NO_OPTION);
                if (result2 == 0){
                    crearUser();
                    codUser=newUser;
                    System.out.println ("SÍ");
                }else{
                    System.out.println ("NO");
                    JOptionPane.showMessageDialog (null, "Se cancelo creación de usuario", "UTPL", JOptionPane.INFORMATION_MESSAGE);
                }
            }else{
                int result = JOptionPane.showConfirmDialog (null, "Confirme si desea actualizar los datos del usuario seleccionado", "UTPL", JOptionPane.YES_NO_OPTION);
                if (result == 0){
                    actualizarUser();
                    System.out.println ("SÍ");
                }else{
                    System.out.println ("NO");
                    JOptionPane.showMessageDialog (null, "Se cancelo modificación de usuario", "UTPL", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            llenarDatosUsuario();
            cargarRoles(""+codUser);
            limpiarTablaFuncion();
            txtnombre.setText("");
            txtuser.setText("");
            txtpass.setText("");
            nuevo=false;
            System.out.println ("SÍ");
        }

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        txtnombre.setText("");
        txtuser.setText("");
        txtpass.setText("");
        limpiarTablaRol();
        limpiarTablaFuncion();
        nuevo=true;
        System.out.println("estado var nuevo "+nuevo);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void agregarRolBtnUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarRolBtnUserActionPerformed
        // TODO add your handling code here:
        selecBox="";
        int idRolAct=0;
        if(codUser!=0){
            selecBox = (String) cbxroles.getSelectedItem();
            String sql= "SELECT idRoles  FROM roles WHERE descripcion='"+selecBox+"'";
            try {
                Statement stmt2 = conBase.createStatement();
                ResultSet rs = stmt2.executeQuery(sql);
                while(rs.next()){
                    idRolAct=rs.getInt(1);
                }
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
            int result = JOptionPane.showConfirmDialog (null, "Confirme si desea agregar rol a usuario seleccionado", "UTPL", JOptionPane.YES_NO_OPTION);
            if (result == 0){
                boolean aux=saberSiExisteRol(codUser,idRolAct);
                System.out.println ("Existe rol: "+aux);
                if(aux==false){
                    agregarRol(codUser,idRolAct);
                    cargarRoles(""+codUser);
                }else{
                    JOptionPane.showMessageDialog (null, "El Rol, que intenta agregar ya esta establecido para ese usuario.", "UTPL", JOptionPane.ERROR_MESSAGE);
                }

            }else{
                System.out.println ("NO");
                JOptionPane.showMessageDialog (null, "No se agrego el rol seleccionado", "UTPL", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog (null, "Primero debe seleccionar un usuario", "UTPL", JOptionPane.ERROR_MESSAGE);
        }
        System.out.println("Codigo user a asignar: "+codUser+" Rol asignar: "+selecBox+" id rol :"+idRolAct);
    }//GEN-LAST:event_agregarRolBtnUserActionPerformed

    private void eliminarRolBtnUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarRolBtnUserActionPerformed
        // TODO add your handling code here:
        int rolEliminarAct=saberIdRolEliminar();
        if(rolEliminarAct!=0){
            int result2 = JOptionPane.showConfirmDialog (null, "Confirme si desea eliminar rol seleccionado", "UTPL", JOptionPane.YES_NO_OPTION);
            if (result2 == 0){
                eliminarRolUser(rolEliminarAct);
                cargarRoles(""+codUser);
                System.out.println ("SÍ");
            }else{
                System.out.println ("NO");
                JOptionPane.showMessageDialog (null, "Se cancelo eliminacion de rol ", "UTPL", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        System.out.println("Rol a eliminar "+rolEliminarAct);
    }//GEN-LAST:event_eliminarRolBtnUserActionPerformed

    private void rolesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rolesTableMouseClicked
        if (rolesTable.getSelectedRow() != -1) {
            String codigo = (String) modelo2.getValueAt(rolesTable.getSelectedRow(), 0);
            codRolSelec = Integer.parseInt(codigo);
            System.out.println("Codigo Rol  Seleccionado "+codRolSelec);
            cargarFunciones(""+codRolSelec);
        } else {
            System.out.println("Seleccione un renglon primero");
        }
    }//GEN-LAST:event_rolesTableMouseClicked

    private void buscarBtnUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnUserActionPerformed
        // TODO add your handling code here:
        buscarUser(buscarTxtUser.getText());
    }//GEN-LAST:event_buscarBtnUserActionPerformed

    private void usuariosTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usuariosTableMouseClicked

        if (usuariosTable.getSelectedRow() != -1) {
            String codigo = (String) modelo.getValueAt(usuariosTable.getSelectedRow(), 0);
            codUser = Integer.parseInt(codigo);
            nomAct = (String) modelo.getValueAt(usuariosTable.getSelectedRow(), 1);
            userAct = (String) modelo.getValueAt(usuariosTable.getSelectedRow(), 2);
            claveAnterior = (String) modelo.getValueAt(usuariosTable.getSelectedRow(), 3);
            System.out.println(codigo);
            txtnombre.setText(nomAct);
            txtuser.setText(userAct);
            nuevo=false;
            limpiarTablaRol();
            limpiarTablaFuncion();
            cargarRoles(""+codUser);
        } else {
            System.out.println("Seleccione un renglon primero");
        }

    }//GEN-LAST:event_usuariosTableMouseClicked

    private void btn_Nuevo_RolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Nuevo_RolActionPerformed

        txtCod.setText("");
        txtDes.setText("");
        limTablaFunc();
        nuevoRol=true;
        System.out.println("estado var nuevo "+nuevoRol);
        
    }//GEN-LAST:event_btn_Nuevo_RolActionPerformed

    private void btn_Guardar_RolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Guardar_RolActionPerformed
        
        validarNuevoRol();
        if(datosCorrectosRol==true){
            if(nuevoRol==true){
                int result2 = JOptionPane.showConfirmDialog (null, "Confirme si desea crear nuevo Rol", "UTPL", JOptionPane.YES_NO_OPTION);
                if (result2 == 0){
                    crearRol();
                    codRol=codNewRol;
                    System.out.println ("SÍ");
                }else{
                    System.out.println ("NO");
                    JOptionPane.showMessageDialog (null, "Se cancelo creación de Rol", "UTPL", JOptionPane.INFORMATION_MESSAGE);
                }
            }else{
                int result = JOptionPane.showConfirmDialog (null, "Confirme si desea actualizar el Rol seleccionado", "UTPL", JOptionPane.YES_NO_OPTION);
                if (result == 0){
                    actualizarRol();
                    System.out.println ("SÍ");
                }else{
                    System.out.println ("NO");
                    JOptionPane.showMessageDialog (null, "Se cancelo modificación de Rol", "UTPL", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            llenarDatosRoles();
            cargarFuncionesFun(""+codRol);
            cargarCombo();
            System.out.println ("SÍ");
        }
    }//GEN-LAST:event_btn_Guardar_RolActionPerformed

    private void btn_Eliminar_RolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_RolActionPerformed
        int result = JOptionPane.showConfirmDialog (null, "Confirme si desea eliminar el rol seleccionado", "UTPL", JOptionPane.YES_NO_OPTION);
        if (result == 0){
            eliminarRol(codRol);
            llenarDatosRoles();
            cargarFuncionesFun(""+codRol);
            System.out.println ("SÍ");
            JOptionPane.showMessageDialog (null, "Rol eliminado correctamente", "UTPL", JOptionPane.INFORMATION_MESSAGE);
        }else{
            System.out.println ("NO");
            JOptionPane.showMessageDialog (null, "Se cancelo eliminación de Rol", "UTPL", JOptionPane.INFORMATION_MESSAGE);
        }
        cargarRoles(""+codUser);
        cargarCombo();
    }//GEN-LAST:event_btn_Eliminar_RolActionPerformed

    private void btn_Agregar_RolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Agregar_RolActionPerformed
        // TODO add your handling code here:
        selecBoxFun="";
        int idFunAct=0;
        if(codRol!=0){
            selecBoxFun = (String) cbx_Fun.getSelectedItem();
            String sql= "SELECT idFunciones  FROM funciones WHERE descripcion='"+selecBoxFun+"'";
            try {
                Statement stmt2 = conBase.createStatement();
                ResultSet rs = stmt2.executeQuery(sql);
                while(rs.next()){
                    idFunAct=rs.getInt(1);
                }
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
            int result = JOptionPane.showConfirmDialog (null, "Confirme si desea agregar la funcion a Rol seleccionado", "UTPL", JOptionPane.YES_NO_OPTION);
            if (result == 0){
                boolean aux = saberSiExisteFun(codRol, idFunAct);
                System.out.println ("Existe fun: "+aux);
               if(aux==false){
                      agregarFunRol(codRol,idFunAct);
                      cargarFuncionesFun(""+codRol);
                }else{
                    JOptionPane.showMessageDialog (null, "La función, que intenta agregar ya esta establecida para ese Rol", "UTPL", JOptionPane.ERROR_MESSAGE);
                }

            }else{
                System.out.println ("NO");
                JOptionPane.showMessageDialog (null, "No se agrego el funcion seleccionada", "UTPL", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog (null, "Primero debe seleccionar un Rol", "UTPL", JOptionPane.ERROR_MESSAGE);
        }
        System.out.println("Codigo Rol a asignar: "+codRol+" Funcion asignar: "+selecBoxFun+" id funcion :"+idFunAct);
    }//GEN-LAST:event_btn_Agregar_RolActionPerformed

    private void btn_Eli_FunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eli_FunActionPerformed
        int funEliminarAct=saberIdFunEliminar();
        if(funEliminarAct!=0){
            int result2 = JOptionPane.showConfirmDialog (null, "Confirme si desea eliminar funcion seleccionado", "UTPL", JOptionPane.YES_NO_OPTION);
            if (result2 == 0){
                eliminarFunRol(funEliminarAct);
                cargarFuncionesFun(""+codRol);
                System.out.println ("SÍ");
            }else{
                System.out.println ("NO");
                JOptionPane.showMessageDialog (null, "Se cancelo eliminacion de funcion ", "UTPL", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        System.out.println("Funcion a eliminar "+funEliminarAct);
    }//GEN-LAST:event_btn_Eli_FunActionPerformed

    private void tb_F_FunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_F_FunMouseClicked

        if (tb_F_Fun.getSelectedRow() != -1) {
            String codigo = (String) modelo6.getValueAt(tb_F_Fun.getSelectedRow(), 0);
            codFun = Integer.parseInt(codigo);
            descFun = (String) modelo6.getValueAt(tb_F_Fun.getSelectedRow(), 1);
            txt_F_cod.setText(""+codFun);
            txt_F_des.setText(descFun);
            nuevoFun=false;
            System.out.println("Funcion seleccionada "+codFun);
        } else {
            System.out.println("Seleccione un renglon primero");
        }       
    }//GEN-LAST:event_tb_F_FunMouseClicked

    private void btn_F_nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_F_nuevoActionPerformed
        txt_F_cod.setText("");
        txt_F_des.setText("");
        nuevoFun=true;
        System.out.println("estado var nuevo "+nuevoFun);        // TODO add your handling code here:
    }//GEN-LAST:event_btn_F_nuevoActionPerformed

    private void btn_F_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_F_guardarActionPerformed
        validarNuevoFun();
        if(datosCorrectosFun==true){
            if(nuevoFun==true){
                int result2 = JOptionPane.showConfirmDialog (null, "Confirme si desea crear nueva Función", "UTPL", JOptionPane.YES_NO_OPTION);
                if (result2 == 0){
                    crearFun();
                    codFun=codNewFun;
                    System.out.println ("SÍ");
                }else{
                    System.out.println ("NO");
                    JOptionPane.showMessageDialog (null, "Se cancelo creación de Función", "UTPL", JOptionPane.INFORMATION_MESSAGE);
                }
            }else{
                int result = JOptionPane.showConfirmDialog (null, "Confirme si desea actualizar la funcion seleccionada", "UTPL", JOptionPane.YES_NO_OPTION);
                if (result == 0){
                    actualizarFun();
                    System.out.println ("SÍ");
                }else{
                    System.out.println ("NO");
                    JOptionPane.showMessageDialog (null, "Se cancelo modificación de Función", "UTPL", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            llenarDatosFunciones();
            cargarCbxFun();
        }
    }//GEN-LAST:event_btn_F_guardarActionPerformed

    private void btn_F_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_F_EliminarActionPerformed
        // TODO add your handling code here:
     
        if(codFun!=0){
            int result2 = JOptionPane.showConfirmDialog (null, "Confirme si desea eliminar funcion seleccionada", "UTPL", JOptionPane.YES_NO_OPTION);
            if (result2 == 0){
                eliminarFunciones(codFun);
                llenarDatosFunciones();
                cargarCbxFun();
                System.out.println ("Cod a eliminar "+codFun+" codRol");
            }else{
                System.out.println ("NO");
                JOptionPane.showMessageDialog (null, "Se cancelo eliminacion de funcion ", "UTPL", JOptionPane.INFORMATION_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog (null, "Debe seleccionar funcion a eliminar ", "UTPL", JOptionPane.WARNING_MESSAGE);
        }
        System.out.println("Funcion a eliminar "+codFun);
        cargarFuncionesFun(""+codRol);
    }//GEN-LAST:event_btn_F_EliminarActionPerformed
    
    public boolean saberSiExisteRol(int user, int codR_Existe){
        boolean existRol=false;
        int rolExiste=0;
        String sql= "SELECT idUsuariosRoles  FROM usuariosroles WHERE Usuarios_idUsuarios = '"+user+"' && Roles_idRoles = '"+codR_Existe+"'";
            try {
                Statement stmt2 = conBase.createStatement();
                ResultSet rs = stmt2.executeQuery(sql);
                while(rs.next()){
                    rolExiste=rs.getInt(1);
                }
                if(rolExiste!=0)
                    existRol=true;
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
        return existRol;  
    }
    
    public boolean saberSiExisteFun(int rol, int codF_Existe){
        boolean existFun=false;
        int rolExiste=0;
        String sql= "SELECT idRolesFunciones  FROM rolesfunciones WHERE Roles_idRoles = '"+rol+"' && Funciones_idFunciones = '"+codF_Existe+"'";
            try {
                Statement stmt2 = conBase.createStatement();
                ResultSet rs = stmt2.executeQuery(sql);
                while(rs.next()){
                    rolExiste=rs.getInt(1);
                }
                if(rolExiste!=0)
                    existFun=true;
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
        return existFun;  
    }
    public int saberIdRol(){
        int codNewUserRol=0;
         String sql= "SELECT MAX(idUsuariosRoles) valor FROM usuariosroles";
            try {
                Statement stmt2 = conBase.createStatement();
                ResultSet rs = stmt2.executeQuery(sql);
                while(rs.next()){
                    codNewUserRol=rs.getInt(1);
                } 
                codNewUserRol=codNewUserRol+1;
                System.out.println("Codigo usuarios roles enviado "+codNewUserRol);
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
            return codNewUserRol;
    }
    public int saberIdFun(){
        int codNewF=0;
         String sql= "SELECT MAX(idFunciones) valor FROM funciones";
            try {
                Statement stmt2 = conBase.createStatement();
                ResultSet rs = stmt2.executeQuery(sql);
                while(rs.next()){
                    codNewF=rs.getInt(1);
                } 
                codNewF=codNewF+1;
                System.out.println("Codigo funciones enviado "+codNewF);
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
            return codNewF;
    }
    public int saberIdRolFun(){
        int codNewRolFun=0;
         String sql= "SELECT MAX(idRolesFunciones) valor FROM rolesfunciones";
            try {
                Statement stmt2 = conBase.createStatement();
                ResultSet rs = stmt2.executeQuery(sql);
                while(rs.next()){
                    codNewRolFun=rs.getInt(1);
                } 
                codNewRolFun=codNewRolFun+1;
                System.out.println("Codigo  roles funciones enviado "+codNewRolFun);
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
            return codNewRolFun;
    }
   
    public void agregarRol(int codU,int codR){
        int codRU = saberIdRol();
            String sql="INSERT INTO usuariosroles  VALUES ('"+codRU+"', '"+codU+"', '"+codR+"')";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql);   
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               }
            JOptionPane.showMessageDialog(this, "Se ha asignado correctamente nuevo rol.");
        System.out.println("Nuevo codigo usuariosRoles; "+codRU);
    }    
    public void agregarFunRol(int codR,int codF){
        int codRF = saberIdRolFun();
            String sql="INSERT INTO rolesfunciones  VALUES ('"+codRF+"', '"+codF+"', '"+codR+"')";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql);   
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               }
            JOptionPane.showMessageDialog(this, "Se ha asignado correctamente nueva funcion a rol.");
        System.out.println("Nuevo codigo funciones roles; "+codRF);
    }  
    public int saberIdRolEliminar(){
        int roleliminar=0;
        if (rolesTable.getSelectedRow() != -1) {
            String codigo = (String) modelo2.getValueAt(rolesTable.getSelectedRow(), 0);
            codRolSelec = Integer.parseInt(codigo);        
            System.out.println("Codigo Rol  Seleccionado "+codRolSelec);
            roleliminar=codRolSelec;
        } else {
            System.out.println("Seleccione un renglon primero de la tabla roles");
            JOptionPane.showMessageDialog (null, "No ha seleccionado rol a eliminar.", "UTPL", JOptionPane.WARNING_MESSAGE);
        }
        return roleliminar;
    }
    public int saberIdFunEliminar(){
        int funeliminar=0;
        if (tbFun.getSelectedRow() != -1) {
            String codigo = (String) modelo5.getValueAt(tbFun.getSelectedRow(), 0);
            codFunSelec = Integer.parseInt(codigo);        
            System.out.println("Codigo Funcion  Seleccionado "+codFunSelec);
            funeliminar=codFunSelec;
        } else {
            System.out.println("Seleccione un renglon primero de la tabla roles");
            JOptionPane.showMessageDialog (null, "No ha seleccionado funcion a eliminar.", "UTPL", JOptionPane.WARNING_MESSAGE);
        }
        return funeliminar;
    }
        
    public void eliminarRolUser(int idRolDelete){
        String sql="DELETE FROM usuariosroles WHERE Usuarios_idUsuarios = '"+codUser+"' && Roles_idRoles = '"+idRolDelete+"'" ;
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql); 
                   JOptionPane.showMessageDialog (null, "Rol eliminado correctamente ", "UTPL", JOptionPane.INFORMATION_MESSAGE);
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               } 
    }
    
    public void eliminarFunRol(int idFunDelete){
        String sql="DELETE FROM rolesfunciones WHERE Roles_idRoles = '"+codRol+"' && Funciones_idFunciones = '"+idFunDelete+"'" ;
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql); 
                   JOptionPane.showMessageDialog (null, "Funcion eliminada correctamente ", "UTPL", JOptionPane.INFORMATION_MESSAGE);
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               } 
    }
    
    public final void buscarUser(String datBuscar){
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(modelo);
        usuariosTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(datBuscar, 1));
    }
    
    public void saberID(){
            String sql= "SELECT MAX(idUsuarios) FROM usuarios";
            try {
                Statement stmt2 = conBase.createStatement();
                ResultSet rs = stmt2.executeQuery(sql);
                while(rs.next()){
                    newUser=rs.getInt(1);
                } 
                newUser=newUser+1;
                System.out.println("POSICION ULTIMO id "+newUser);
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    public void saberIdRolNew(){
        String sql= "SELECT MAX(idRoles) FROM roles";
            try {
                Statement stmt2 = conBase.createStatement();
                ResultSet rs = stmt2.executeQuery(sql);
                while(rs.next()){
                    codNewRol=rs.getInt(1);
                } 
                codNewRol=codNewRol+1;
                System.out.println("POSICION ULTIMO id "+codNewRol);
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    public void actualizarUser(){
         if(datosCorrectos==true){
               try {
                   //UPDATE `seguridad`.`usuarios` SET `nombre` = 'Juan Alvarez', `user` = 'gr', `pass` = '54' WHERE (`idUsuarios` = '4');
                   
                   if(passNew.equals(claveAnterior)){
                       claveEncriptada=claveAnterior;
                   }else{
                       claveEncriptada=encry.Encriptar(passNew);
                   }
                   claveDecodificada=encry.Desencriptar(passNew);
                   System.out.println("Clave encriptada es: "+claveEncriptada+" Deco "+claveDecodificada);
                   
                   passNew=claveEncriptada;
                   String sql="UPDATE  usuarios  SET nombre = '"+nomNew+"' ,user = '"+userNew+"', pass = '"+passNew+"' WHERE idUsuarios = '"+codUser+"'";
                   try {
                       Statement stmt2 =  conBase.createStatement();
                       stmt2.executeUpdate(sql);
                   } catch (SQLException ex) {
                       Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   JOptionPane.showMessageDialog(this, "Se ha actualizado correctamente datos del usuario");
                   userGuardado=true;
               } catch (Exception ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               }
         }else{
            userGuardado=false;
         }
    
    }
    public void actualizarRol(){
        if(datosCorrectosRol==true){
            //UPDATE `seguridad`.`usuarios` SET `nombre` = 'Juan Alvarez', `user` = 'gr', `pass` = '54' WHERE (`idUsuarios` = '4');
            String sql="UPDATE  roles  SET descripcion = '"+descRol+"' WHERE idRoles = '"+codRol+"'";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql);   
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               }
            JOptionPane.showMessageDialog(this, "Se ha actualizado correctamente rl Rol");
            rolGuardado=true;
         }else{
            rolGuardado=false;
         }
    }
    
    public void actualizarFun(){
        if(datosCorrectosFun==true){
            String sql="UPDATE  funciones  SET descripcion = '"+descFun+"' WHERE idFunciones = '"+codFun+"'";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql);   
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               }
            JOptionPane.showMessageDialog(this, "Se ha actualizado correctamente funcionalidad");
            funGuardado=true;
         }else{
            funGuardado=false;
         }
    }
    
    public void validarNuevoUser(){
        nomNew=txtnombre.getText();
        userNew=txtuser.getText();
        if(nuevo==false && txtpass.getText().equals(""))    
            passNew=claveAnterior;
        else
            passNew=txtpass.getText();
        
        if(nomNew.equals("")||userNew.equals("")||passNew.equals("")){
           JOptionPane.showMessageDialog(this, "Debe ingresar todos los datos, del nuevo usuario: Nombre, usuario y contraseña"); 
           datosCorrectos=false;
           System.out.println("estado var datosCorrectos"+datosCorrectos);
        }else{
           datosCorrectos=true;
           System.out.println("estado var datosCorrectos "+datosCorrectos);
        }
    }
    public void validarNuevoRol(){
        descRol=txtDes.getText();
        if(descRol.equals("")){
           JOptionPane.showMessageDialog(this, "Debe ingresar todos los datos, del rol: Descripcion"); 
           datosCorrectosRol=false;
           System.out.println("estado var datosCorrectos"+datosCorrectosRol);
        }else{
           datosCorrectosRol=true;
           System.out.println("estado var datosCorrectos "+datosCorrectosRol);
        }
    }
    public void validarNuevoFun(){
        descFun=txt_F_des.getText();
        if(descFun.equals("")){
           JOptionPane.showMessageDialog(this, "Debe ingresar todos los datos, de la funcion: Descripcion"); 
           datosCorrectosFun=false;
           System.out.println("estado var datosCorrectos"+datosCorrectosFun);
        }else{
           datosCorrectosFun=true;
           System.out.println("estado var datosCorrectos "+datosCorrectosFun);
        }
    }
    public void eliminarUser(int idEliminar, String tipo){
        System.out.println("Ide a eliminar "+idEliminar +"Tipo: "+tipo);
        
        if(tipo.equals("ELIMINAR")){
               String sql="DELETE FROM usuariosroles WHERE Usuarios_idUsuarios = '"+idEliminar+"'";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql); 
                   System.out.println("Se elimino rol asociado");
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               } 
               String sql2="DELETE FROM usuarios WHERE idUsuarios = '"+idEliminar+"'";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql2); 
                   System.out.println("Se elimino usuario ");
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               } 
        }
        limpiarTablaRol();
        limpiarTablaFuncion();
        llenarDatosUsuario();   
    }
    public void eliminarRol(int idEliminar ){
        System.out.println("Ide a eliminar "+idEliminar );
               String sql="DELETE FROM rolesfunciones WHERE Roles_idRoles = '"+idEliminar+"'";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql); 
                   System.out.println("Se elimino funcion asociada");
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               } 
               String sql2="DELETE FROM usuariosroles WHERE Roles_idRoles = '"+idEliminar+"'";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql2); 
                   System.out.println("Se elimino rol asociado a user");
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               } 
               String sql3="DELETE FROM roles WHERE idRoles = '"+idEliminar+"'";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql3); 
                   System.out.println("Se elimino rol ");
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               }    
    }
    public void eliminarFunciones(int idEliminar ){
        System.out.println("Ide a eliminar de funciones "+idEliminar );
               String sql="DELETE FROM rolesfunciones WHERE Funciones_idFunciones = '"+idEliminar+"'";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql); 
                   System.out.println("Se elimino funcion asociada a rol");
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               } 
               
               String sql3="DELETE FROM funciones WHERE idFunciones = '"+idEliminar+"'";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql3); 
                   System.out.println("Se elimino funcion No. "+codFun);
                   JOptionPane.showMessageDialog (null, "Función eliminada correctamente", "UTPL", JOptionPane.INFORMATION_MESSAGE);
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               }    
    }
    public void crearUser(){
         if(datosCorrectos==true){
               try {
                   saberID();
                   claveEncriptada=encry.Encriptar(passNew);
                   passNew=claveEncriptada;
                   claveDecodificada=encry.Desencriptar(passNew);
                   System.out.println("Clave encriptada es: "+claveEncriptada+" Deco "+claveDecodificada);
                   String sql="INSERT INTO usuarios  VALUES ('"+newUser+"', '"+nomNew+"', '"+userNew+"', '"+passNew+"')";
                   try {
                       Statement stmt2 =  conBase.createStatement();
                       stmt2.executeUpdate(sql);
                   } catch (SQLException ex) {
                       Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   JOptionPane.showMessageDialog(this, "Se ha creado correctamente el nuevo usuario, ahora puede agregar roles.");
                   userGuardado=true;
                   txtnombre.setText("");
                   txtuser.setText("");
                   txtpass.setText("");
               } catch (Exception ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               }
         }else{
            userGuardado=false;
         }
    }
    public void crearRol(){
        if(datosCorrectosRol==true){
            saberIdRolNew();
            txtCod.setText(""+codNewRol);
            String sql="INSERT INTO roles  VALUES ('"+codNewRol+"', '"+descRol+"')";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql);   
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               }
            JOptionPane.showMessageDialog(this, "Se ha creado correctamente el nuevo Rol, ahora puede agregar funciones.");
            rolGuardado=true;
            txtCod.setText("");
            txtDes.setText("");

         }else{
            rolGuardado=false;
         }
    }
    public void crearFun(){
        if(datosCorrectosFun==true){
            codNewFun=saberIdFun();
            txt_F_cod.setText(""+codNewFun);
            String sql="INSERT INTO funciones VALUES ('"+codNewFun+"', '"+descFun+"')";
               try {
                   Statement stmt2 =  conBase.createStatement();
                   stmt2.executeUpdate(sql);   
               } catch (SQLException ex) {
                   Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
               }
            JOptionPane.showMessageDialog(this, "Se ha creado correctamente la nueva función.");
            funGuardado=true;
            txt_F_cod.setText("");
            txt_F_des.setText("");

         }else{
            funGuardado=false;
         }
    }
    public void cargarRoles(String codUser){
        limpiarTablaRol();
        rolesTable.setModel(modelo2);
        String sql= "SELECT t1.idRoles id, t1.descripcion des FROM roles t1, usuariosroles t2 "
                + "WHERE t1.idRoles= t2.Roles_idRoles "
                + "&& t2.Usuarios_idUsuarios='"+codUser+"'";
        String []datos = new String [2];
            try {
                Statement stmt2 = conBase.createStatement();
                ResultSet rs = stmt2.executeQuery(sql);
                while(rs.next()){
                    datos[0]=""+rs.getInt(1);
                    datos[1]=rs.getString(2);
                    modelo2.addRow(datos);
                }
                rolesTable.setModel(modelo2);
                cargarFunciones(datos[0]);
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    public void cargarFunciones(String codRol){
        limpiarTablaFuncion();
        funcionesTable.setModel(modelo3);
        String sql="SELECT t4.idFunciones dato1, t4.descripcion dato2 " +
                                    "FROM " +
                                        "roles t2, " +
                                        "rolesfunciones t3, " +
                                        "funciones t4 " +
                                    "WHERE " +
                                        "t2.idRoles = '"+codRol+"'"+
                                        "&& t2.idRoles = t3.Roles_idRoles " +
                                        "&& t3.Funciones_idFunciones = t4.idFunciones";
        
        String []datos = new String [2];
            try {
                Statement stmt3 = conBase.createStatement();
                ResultSet rs = stmt3.executeQuery(sql);
                while(rs.next()){
                    datos[0]=""+rs.getInt(1);
                    datos[1]=rs.getString(2);
                    modelo3.addRow(datos);
                }
                funcionesTable.setModel(modelo3);
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    public final void cargarCombo(){
        cbxroles.removeAllItems();
            String sql= "SELECT descripcion FROM roles";
                try {
                    stmt = conBase.createStatement();
                    ResultSet rs = stmt.executeQuery(sql);
                    while(rs.next()){
                        cbxroles.addItem(rs.getString(1));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
                }
    }
    public void limpiarTablaUser(){
        DefaultTableModel tb = (DefaultTableModel) usuariosTable.getModel();
        int a = usuariosTable.getRowCount()-1;
        for (int i = a; i >= 0; i--) {          
        tb.removeRow(tb.getRowCount()-1);
        }
    }
    public void limpiarTablaRol(){
        DefaultTableModel tb = (DefaultTableModel) rolesTable.getModel();
        int a = rolesTable.getRowCount()-1;
        for (int i = a; i >= 0; i--) {          
        tb.removeRow(tb.getRowCount()-1);
        }
        //cargaTicket();
    }
    public void limpiarTablaFuncion(){
        DefaultTableModel tb = (DefaultTableModel) funcionesTable.getModel();
        int a = funcionesTable.getRowCount()-1;
        for (int i = a; i >= 0; i--) {          
        tb.removeRow(tb.getRowCount()-1);
        }
        //cargaTicket();
    }
    public void cargarCbxFun(){
         cbx_Fun.removeAllItems();
            String sql= "SELECT descripcion FROM funciones";
                try {
                    stmt = conBase.createStatement();
                    ResultSet rs = stmt.executeQuery(sql);
                    while(rs.next()){
                        cbx_Fun.addItem(rs.getString(1));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
                }
    }
    public void limTablaRoles(){
        DefaultTableModel tb = (DefaultTableModel) tbRol.getModel();
        int a = tbRol.getRowCount()-1;
        for (int i = a; i >= 0; i--) {          
            tb.removeRow(tb.getRowCount()-1);
        }
    }
    public void limTablaFunc(){
        DefaultTableModel tb = (DefaultTableModel) tbFun.getModel();
        int a = tbFun.getRowCount()-1;
        for (int i = a; i >= 0; i--) {          
            tb.removeRow(tb.getRowCount()-1);
        }
    }
    public void limTbFunc(){
        DefaultTableModel tb = (DefaultTableModel) tb_F_Fun.getModel();
        int a = tb_F_Fun.getRowCount()-1;
        for (int i = a; i >= 0; i--) {          
            tb.removeRow(tb.getRowCount()-1);
        }
    }
    public final void llenarDatosUsuario(){
        cargarCombo();
        limpiarTablaUser();
        usuariosTable.setModel(modelo);
        String sql= "SELECT * FROM usuarios";
        String []datos = new String [4];
            try {
                stmt = conBase.createStatement();
                ResultSet rs = stmt.executeQuery(sql);
                while(rs.next()){
                    datos[0]=""+rs.getInt("idUsuarios");
                    datos[1]=rs.getString("nombre");
                    datos[2]=rs.getString("user");
                    datos[3]=rs.getString("pass");
                    modelo.addRow(datos);
                }
                usuariosTable.setModel(modelo);
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
     }
    public final void llenarDatosRoles(){
        cargarCbxFun();
        limTablaRoles();
        tbRol.setModel(modelo4);
        String sql= "SELECT * FROM roles";
        String []datos = new String [2];
            try {
                stmt = conBase.createStatement();
                ResultSet rs = stmt.executeQuery(sql);
                while(rs.next()){
                    datos[0]=""+rs.getInt(1);
                    datos[1]=rs.getString(2);
                    modelo4.addRow(datos);
                }
                tbRol.setModel(modelo4);
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
     }
    
    public final void llenarDatosFunciones(){
        limTbFunc();
        tb_F_Fun.setModel(modelo6);
        String sql= "SELECT * FROM funciones";
        String []datos = new String [2];
            try {
                stmt = conBase.createStatement();
                ResultSet rs = stmt.executeQuery(sql);
                while(rs.next()){
                    datos[0]=""+rs.getInt(1);
                    datos[1]=rs.getString(2);
                    modelo6.addRow(datos);
                }
                tb_F_Fun.setModel(modelo6);
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
     }
    
    public void cargarFuncionesFun(String codRol){
        limTablaFunc();
        tbFun.setModel(modelo5);
        String sql="SELECT t4.idFunciones , t4.descripcion " +
                                    "FROM " +
                                        "rolesfunciones t3, " +
                                        "funciones t4 " +
                                    "WHERE " +
                                        "t3.Roles_idRoles = '"+codRol+"'"+
                                        "&& t3.Funciones_idFunciones = t4.idFunciones";
        String []datos = new String [2];
            try {
                Statement stmt3 = conBase.createStatement();
                ResultSet rs = stmt3.executeQuery(sql);
                while(rs.next()){
                    datos[0]=""+rs.getInt(1);
                    datos[1]=rs.getString(2);
                    modelo5.addRow(datos);
                }
                tbFun.setModel(modelo5);
            } catch (SQLException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Administracion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PaneRoles;
    private javax.swing.JPanel PanelPrincipal;
    private javax.swing.JPanel PanelUser;
    private javax.swing.JTabbedPane Pestanas;
    private javax.swing.JButton agregarRolBtnUser;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btn_Agregar_Rol;
    private javax.swing.JButton btn_Eli_Fun;
    private javax.swing.JButton btn_Eliminar_Rol;
    private javax.swing.JButton btn_F_Eliminar;
    private javax.swing.JButton btn_F_guardar;
    private javax.swing.JButton btn_F_nuevo;
    private javax.swing.JButton btn_Guardar_Rol;
    private javax.swing.JButton btn_Nuevo_Rol;
    private javax.swing.JButton buscarBtnUser;
    private javax.swing.JTextField buscarTxtUser;
    private javax.swing.JComboBox<String> cbx_Fun;
    private javax.swing.JComboBox<String> cbxroles;
    private javax.swing.JButton eliminarRolBtnUser;
    private javax.swing.JTable funcionesTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable rolesTable;
    private javax.swing.JTable tbFun;
    private javax.swing.JTable tbRol;
    private javax.swing.JTable tb_F_Fun;
    private javax.swing.JTextField txtCod;
    private javax.swing.JTextField txtDes;
    private javax.swing.JTextField txt_F_cod;
    private javax.swing.JTextField txt_F_des;
    private javax.swing.JTextField txtnombre;
    private javax.swing.JTextField txtpass;
    private javax.swing.JTextField txtuser;
    private javax.swing.JTable usuariosTable;
    // End of variables declaration//GEN-END:variables
}
